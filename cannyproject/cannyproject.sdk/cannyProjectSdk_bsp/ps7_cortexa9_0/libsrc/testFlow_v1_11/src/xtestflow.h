// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XTESTFLOW_H
#define XTESTFLOW_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xtestflow_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XTestflow_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XTestflow;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XTestflow_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XTestflow_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XTestflow_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XTestflow_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XTestflow_Initialize(XTestflow *InstancePtr, u16 DeviceId);
XTestflow_Config* XTestflow_LookupConfig(u16 DeviceId);
int XTestflow_CfgInitialize(XTestflow *InstancePtr, XTestflow_Config *ConfigPtr);
#else
int XTestflow_Initialize(XTestflow *InstancePtr, const char* InstanceName);
int XTestflow_Release(XTestflow *InstancePtr);
#endif

void XTestflow_Start(XTestflow *InstancePtr);
u32 XTestflow_IsDone(XTestflow *InstancePtr);
u32 XTestflow_IsIdle(XTestflow *InstancePtr);
u32 XTestflow_IsReady(XTestflow *InstancePtr);
void XTestflow_EnableAutoRestart(XTestflow *InstancePtr);
void XTestflow_DisableAutoRestart(XTestflow *InstancePtr);

u32 XTestflow_Get_a_BaseAddress(XTestflow *InstancePtr);
u32 XTestflow_Get_a_HighAddress(XTestflow *InstancePtr);
u32 XTestflow_Get_a_TotalBytes(XTestflow *InstancePtr);
u32 XTestflow_Get_a_BitWidth(XTestflow *InstancePtr);
u32 XTestflow_Get_a_Depth(XTestflow *InstancePtr);
u32 XTestflow_Write_a_Words(XTestflow *InstancePtr, int offset, int *data, int length);
u32 XTestflow_Read_a_Words(XTestflow *InstancePtr, int offset, int *data, int length);
u32 XTestflow_Write_a_Bytes(XTestflow *InstancePtr, int offset, char *data, int length);
u32 XTestflow_Read_a_Bytes(XTestflow *InstancePtr, int offset, char *data, int length);
u32 XTestflow_Get_b_BaseAddress(XTestflow *InstancePtr);
u32 XTestflow_Get_b_HighAddress(XTestflow *InstancePtr);
u32 XTestflow_Get_b_TotalBytes(XTestflow *InstancePtr);
u32 XTestflow_Get_b_BitWidth(XTestflow *InstancePtr);
u32 XTestflow_Get_b_Depth(XTestflow *InstancePtr);
u32 XTestflow_Write_b_Words(XTestflow *InstancePtr, int offset, int *data, int length);
u32 XTestflow_Read_b_Words(XTestflow *InstancePtr, int offset, int *data, int length);
u32 XTestflow_Write_b_Bytes(XTestflow *InstancePtr, int offset, char *data, int length);
u32 XTestflow_Read_b_Bytes(XTestflow *InstancePtr, int offset, char *data, int length);

void XTestflow_InterruptGlobalEnable(XTestflow *InstancePtr);
void XTestflow_InterruptGlobalDisable(XTestflow *InstancePtr);
void XTestflow_InterruptEnable(XTestflow *InstancePtr, u32 Mask);
void XTestflow_InterruptDisable(XTestflow *InstancePtr, u32 Mask);
void XTestflow_InterruptClear(XTestflow *InstancePtr, u32 Mask);
u32 XTestflow_InterruptGetEnabled(XTestflow *InstancePtr);
u32 XTestflow_InterruptGetStatus(XTestflow *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
