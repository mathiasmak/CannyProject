// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="greyScale,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=25,HLS_SYN_FF=3429,HLS_SYN_LUT=4849}" *)

module greyScale (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [10:0] pixelInput_address0;
reg    pixelInput_ce0;
wire   [7:0] pixelInput_q0;
reg   [10:0] pixelOutput_address0;
reg    pixelOutput_ce0;
reg    pixelOutput_we0;
reg   [7:0] pixelOutput_d0;
reg   [7:0] reg_165;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_148_p2;
reg   [63:0] reg_169;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_144_p2;
reg   [63:0] reg_175;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_fu_193_p2;
wire   [11:0] tmp_7_fu_203_p1;
reg   [11:0] tmp_7_reg_411;
wire   [31:0] sum2_cast_fu_212_p1;
reg   [31:0] sum2_cast_reg_417;
reg   [7:0] pixelInput_load_1_reg_427;
wire    ap_CS_fsm_state4;
wire  signed [31:0] tmp_13_fu_217_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] sum4_cast_fu_231_p1;
reg   [31:0] sum4_cast_reg_442;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_159_p1;
reg   [63:0] tmp_s_reg_452;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_162_p1;
reg   [63:0] tmp_2_reg_457;
wire  signed [31:0] tmp_15_fu_236_p1;
reg   [63:0] tmp_5_reg_467;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_153_p2;
reg   [63:0] tmp_3_reg_472;
reg   [0:0] p_Result_s_reg_477;
wire    ap_CS_fsm_state27;
wire   [51:0] loc_V_1_fu_263_p1;
reg   [51:0] loc_V_1_reg_482;
wire   [0:0] isNeg_fu_277_p3;
reg   [0:0] isNeg_reg_487;
wire   [11:0] sh_assign_1_fu_295_p3;
reg   [11:0] sh_assign_1_reg_492;
wire   [7:0] tmp_12_fu_361_p3;
reg   [7:0] tmp_12_reg_497;
wire    ap_CS_fsm_state28;
wire   [7:0] tmp_9_fu_373_p3;
reg   [7:0] tmp_9_reg_503;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg   [31:0] pixelStart_1_fu_84;
wire   [31:0] pixelStart_fu_380_p2;
reg   [63:0] grp_fu_144_p0;
reg   [63:0] grp_fu_144_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
reg   [63:0] grp_fu_148_p0;
reg   [63:0] grp_fu_148_p1;
wire    ap_CS_fsm_state11;
reg  signed [31:0] grp_fu_159_p0;
wire  signed [31:0] grp_fu_162_p0;
wire   [29:0] tmp_fu_183_p4;
wire   [11:0] sum2_fu_207_p2;
wire   [11:0] sum4_fu_226_p2;
wire   [63:0] p_Val2_s_fu_241_p1;
wire   [10:0] loc_V_fu_253_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_267_p1;
wire   [11:0] sh_assign_fu_271_p2;
wire   [10:0] tmp_3_i_i_i_fu_285_p2;
wire  signed [11:0] tmp_3_i_i_i_cast_fu_291_p1;
wire   [53:0] tmp_1_i_i_i_fu_303_p4;
wire  signed [31:0] sh_assign_1_cast_fu_316_p1;
wire   [53:0] tmp_5_i_i_i_cast_fu_323_p1;
wire   [136:0] tmp_1_i_i_i_cast_fu_312_p1;
wire   [136:0] tmp_5_i_i_i_fu_319_p1;
wire   [53:0] tmp_6_i_i_i_fu_327_p2;
wire   [0:0] tmp_19_fu_339_p3;
wire   [136:0] tmp_8_i_i_i_fu_333_p2;
wire   [7:0] tmp_10_fu_347_p1;
wire   [7:0] tmp_11_fu_351_p4;
wire   [7:0] tmp_8_fu_368_p2;
reg   [30:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

greyScale_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
greyScale_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .pixelInput_address0(pixelInput_address0),
    .pixelInput_ce0(pixelInput_ce0),
    .pixelInput_q0(pixelInput_q0),
    .pixelOutput_address0(pixelOutput_address0),
    .pixelOutput_ce0(pixelOutput_ce0),
    .pixelOutput_we0(pixelOutput_we0),
    .pixelOutput_d0(pixelOutput_d0)
);

greyScale_dadd_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
greyScale_dadd_64bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_144_p0),
    .din1(grp_fu_144_p1),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

greyScale_dmul_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
greyScale_dmul_64cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_148_p0),
    .din1(grp_fu_148_p1),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

greyScale_dmul_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
greyScale_dmul_64cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_457),
    .din1(64'd4603489467105573601),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

greyScale_sitodp_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
greyScale_sitodp_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_159_p0),
    .ce(1'b1),
    .dout(grp_fu_159_p1)
);

greyScale_sitodp_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
greyScale_sitodp_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_162_p0),
    .ce(1'b1),
    .dout(grp_fu_162_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        isNeg_reg_487 <= sh_assign_fu_271_p2[32'd11];
        loc_V_1_reg_482 <= loc_V_1_fu_263_p1;
        p_Result_s_reg_477 <= p_Val2_s_fu_241_p1[32'd63];
        sh_assign_1_reg_492 <= sh_assign_1_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pixelInput_load_1_reg_427 <= pixelInput_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        pixelStart_1_fu_84 <= pixelStart_fu_380_p2;
        tmp_9_reg_503 <= tmp_9_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_165 <= pixelInput_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_169 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_175 <= grp_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum2_cast_reg_417[11 : 0] <= sum2_cast_fu_212_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum4_cast_reg_442[11 : 0] <= sum4_cast_fu_231_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_12_reg_497 <= tmp_12_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_reg_457 <= grp_fu_162_p1;
        tmp_s_reg_452 <= grp_fu_159_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_3_reg_472 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_5_reg_467 <= grp_fu_159_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_193_p2 == 1'd1))) begin
        tmp_7_reg_411 <= tmp_7_fu_203_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_193_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_193_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_144_p0 = reg_175;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_144_p0 = reg_169;
    end else begin
        grp_fu_144_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_144_p1 = reg_169;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_144_p1 = tmp_3_reg_472;
    end else begin
        grp_fu_144_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_148_p0 = tmp_5_reg_467;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_148_p0 = tmp_s_reg_452;
    end else begin
        grp_fu_148_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_148_p1 = 64'd4599075939470750515;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_148_p1 = 64'd4592590756007337001;
    end else begin
        grp_fu_148_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_159_p0 = tmp_15_fu_236_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_159_p0 = tmp_13_fu_217_p1;
    end else begin
        grp_fu_159_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pixelInput_address0 = sum4_cast_fu_231_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pixelInput_address0 = sum2_cast_fu_212_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pixelInput_address0 = pixelStart_1_fu_84;
    end else begin
        pixelInput_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        pixelInput_ce0 = 1'b1;
    end else begin
        pixelInput_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        pixelOutput_address0 = sum4_cast_reg_442;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        pixelOutput_address0 = sum2_cast_reg_417;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        pixelOutput_address0 = pixelStart_1_fu_84;
    end else begin
        pixelOutput_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31))) begin
        pixelOutput_ce0 = 1'b1;
    end else begin
        pixelOutput_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31))) begin
        pixelOutput_d0 = tmp_9_reg_503;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        pixelOutput_d0 = tmp_9_fu_373_p3;
    end else begin
        pixelOutput_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31))) begin
        pixelOutput_we0 = 1'b1;
    end else begin
        pixelOutput_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_193_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_162_p0 = $signed(pixelInput_load_1_reg_427);

assign icmp_fu_193_p2 = ((tmp_fu_183_p4 == 30'd0) ? 1'b1 : 1'b0);

assign isNeg_fu_277_p3 = sh_assign_fu_271_p2[32'd11];

assign loc_V_1_fu_263_p1 = p_Val2_s_fu_241_p1[51:0];

assign loc_V_fu_253_p4 = {{p_Val2_s_fu_241_p1[62:52]}};

assign p_Val2_s_fu_241_p1 = reg_175;

assign pixelStart_fu_380_p2 = (32'd3 + pixelStart_1_fu_84);

assign sh_assign_1_cast_fu_316_p1 = $signed(sh_assign_1_reg_492);

assign sh_assign_1_fu_295_p3 = ((isNeg_fu_277_p3[0:0] === 1'b1) ? tmp_3_i_i_i_cast_fu_291_p1 : sh_assign_fu_271_p2);

assign sh_assign_fu_271_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_267_p1));

assign sum2_cast_fu_212_p1 = sum2_fu_207_p2;

assign sum2_fu_207_p2 = (12'd1 + tmp_7_reg_411);

assign sum4_cast_fu_231_p1 = sum4_fu_226_p2;

assign sum4_fu_226_p2 = (12'd2 + tmp_7_reg_411);

assign tmp_10_fu_347_p1 = tmp_19_fu_339_p3;

assign tmp_11_fu_351_p4 = {{tmp_8_i_i_i_fu_333_p2[60:53]}};

assign tmp_12_fu_361_p3 = ((isNeg_reg_487[0:0] === 1'b1) ? tmp_10_fu_347_p1 : tmp_11_fu_351_p4);

assign tmp_13_fu_217_p1 = $signed(reg_165);

assign tmp_15_fu_236_p1 = $signed(reg_165);

assign tmp_19_fu_339_p3 = tmp_6_i_i_i_fu_327_p2[32'd53];

assign tmp_1_i_i_i_cast_fu_312_p1 = tmp_1_i_i_i_fu_303_p4;

assign tmp_1_i_i_i_fu_303_p4 = {{{{1'd1}, {loc_V_1_reg_482}}}, {1'd0}};

assign tmp_3_i_i_i_cast_fu_291_p1 = $signed(tmp_3_i_i_i_fu_285_p2);

assign tmp_3_i_i_i_fu_285_p2 = (11'd1023 - loc_V_fu_253_p4);

assign tmp_5_i_i_i_cast_fu_323_p1 = $unsigned(sh_assign_1_cast_fu_316_p1);

assign tmp_5_i_i_i_fu_319_p1 = $unsigned(sh_assign_1_cast_fu_316_p1);

assign tmp_6_i_i_i_fu_327_p2 = tmp_1_i_i_i_fu_303_p4 >> tmp_5_i_i_i_cast_fu_323_p1;

assign tmp_7_fu_203_p1 = pixelStart_1_fu_84[11:0];

assign tmp_8_fu_368_p2 = (8'd0 - tmp_12_reg_497);

assign tmp_8_i_i_i_fu_333_p2 = tmp_1_i_i_i_cast_fu_312_p1 << tmp_5_i_i_i_fu_319_p1;

assign tmp_9_fu_373_p3 = ((p_Result_s_reg_477[0:0] === 1'b1) ? tmp_8_fu_368_p2 : tmp_12_reg_497);

assign tmp_fu_183_p4 = {{pixelStart_1_fu_84[31:2]}};

assign tmp_i_i_i_i_cast1_fu_267_p1 = loc_V_fu_253_p4;

always @ (posedge ap_clk) begin
    sum2_cast_reg_417[31:12] <= 20'b00000000000000000000;
    sum4_cast_reg_442[31:12] <= 20'b00000000000000000000;
end

endmodule //greyScale
