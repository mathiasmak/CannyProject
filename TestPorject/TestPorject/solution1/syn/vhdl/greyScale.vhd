-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity greyScale is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of greyScale is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "greyScale,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=25,HLS_SYN_FF=3429,HLS_SYN_LUT=4849}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3FBC28F5C28F5C29 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111100001010001111010111000010100011110101110000101001";
    constant ap_const_lv64_3FD3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001100110011001100110011001100110011001100110011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_3FE2E147AE147AE1 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010111000010100011110101110000101000111101011100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal pixelInput_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pixelInput_ce0 : STD_LOGIC;
    signal pixelInput_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelOutput_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pixelOutput_ce0 : STD_LOGIC;
    signal pixelOutput_we0 : STD_LOGIC;
    signal pixelOutput_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_169 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_175 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_203_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_reg_411 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum2_cast_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelInput_load_1_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_13_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum4_cast_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_cast_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_452 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_457 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_467 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_472 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal loc_V_1_fu_263_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_482 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_487 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_295_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_492 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_361_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_9_fu_373_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_503 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal pixelStart_1_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelStart_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_148_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_183_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal sum2_fu_207_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum4_fu_226_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_253_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_271_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_i_i_i_fu_285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_i_i_i_cast_fu_291_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_i_i_i_fu_303_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_1_cast_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_i_cast_fu_323_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_1_i_i_i_cast_fu_312_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_5_i_i_i_fu_319_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_6_i_i_i_fu_327_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_19_fu_339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_i_fu_333_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_10_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_368_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);

    component greyScale_dadd_64bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component greyScale_dmul_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component greyScale_sitodp_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component greyScale_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        pixelInput_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        pixelInput_ce0 : IN STD_LOGIC;
        pixelInput_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pixelOutput_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        pixelOutput_ce0 : IN STD_LOGIC;
        pixelOutput_we0 : IN STD_LOGIC;
        pixelOutput_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    greyScale_AXILiteS_s_axi_U : component greyScale_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        pixelInput_address0 => pixelInput_address0,
        pixelInput_ce0 => pixelInput_ce0,
        pixelInput_q0 => pixelInput_q0,
        pixelOutput_address0 => pixelOutput_address0,
        pixelOutput_ce0 => pixelOutput_ce0,
        pixelOutput_we0 => pixelOutput_we0,
        pixelOutput_d0 => pixelOutput_d0);

    greyScale_dadd_64bkb_U0 : component greyScale_dadd_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_144_p0,
        din1 => grp_fu_144_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);

    greyScale_dmul_64cud_U1 : component greyScale_dmul_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_148_p0,
        din1 => grp_fu_148_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    greyScale_dmul_64cud_U2 : component greyScale_dmul_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_reg_457,
        din1 => ap_const_lv64_3FE2E147AE147AE1,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    greyScale_sitodp_dEe_U3 : component greyScale_sitodp_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_159_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_159_p1);

    greyScale_sitodp_dEe_U4 : component greyScale_sitodp_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_162_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                isNeg_reg_487 <= sh_assign_fu_271_p2(11 downto 11);
                loc_V_1_reg_482 <= loc_V_1_fu_263_p1;
                p_Result_s_reg_477 <= p_Val2_s_fu_241_p1(63 downto 63);
                sh_assign_1_reg_492 <= sh_assign_1_fu_295_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                pixelInput_load_1_reg_427 <= pixelInput_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                pixelStart_1_fu_84 <= pixelStart_fu_380_p2;
                tmp_9_reg_503 <= tmp_9_fu_373_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_165 <= pixelInput_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_169 <= grp_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_175 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    sum2_cast_reg_417(11 downto 0) <= sum2_cast_fu_212_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    sum4_cast_reg_442(11 downto 0) <= sum4_cast_fu_231_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_12_reg_497 <= tmp_12_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_2_reg_457 <= grp_fu_162_p1;
                tmp_s_reg_452 <= grp_fu_159_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_3_reg_472 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_5_reg_467 <= grp_fu_159_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_193_p2 = ap_const_lv1_1))) then
                tmp_7_reg_411 <= tmp_7_fu_203_p1;
            end if;
        end if;
    end process;
    sum2_cast_reg_417(31 downto 12) <= "00000000000000000000";
    sum4_cast_reg_442(31 downto 12) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_fu_193_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_193_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_fu_193_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_193_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_fu_193_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_193_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_144_p0_assign_proc : process(reg_169, reg_175, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_144_p0 <= reg_175;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_144_p0 <= reg_169;
        else 
            grp_fu_144_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p1_assign_proc : process(reg_169, tmp_3_reg_472, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_144_p1 <= reg_169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_144_p1 <= tmp_3_reg_472;
        else 
            grp_fu_144_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_148_p0_assign_proc : process(ap_CS_fsm_state16, tmp_s_reg_452, tmp_5_reg_467, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_148_p0 <= tmp_5_reg_467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_148_p0 <= tmp_s_reg_452;
        else 
            grp_fu_148_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_148_p1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_148_p1 <= ap_const_lv64_3FD3333333333333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_148_p1 <= ap_const_lv64_3FBC28F5C28F5C29;
        else 
            grp_fu_148_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_159_p0_assign_proc : process(tmp_13_fu_217_p1, ap_CS_fsm_state5, ap_CS_fsm_state10, tmp_15_fu_236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_159_p0 <= tmp_15_fu_236_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_159_p0 <= tmp_13_fu_217_p1;
        else 
            grp_fu_159_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_162_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixelInput_load_1_reg_427),32));

    icmp_fu_193_p2 <= "1" when (tmp_fu_183_p4 = ap_const_lv30_0) else "0";
    isNeg_fu_277_p3 <= sh_assign_fu_271_p2(11 downto 11);
    loc_V_1_fu_263_p1 <= p_Val2_s_fu_241_p1(52 - 1 downto 0);
    loc_V_fu_253_p4 <= p_Val2_s_fu_241_p1(62 downto 52);
    p_Val2_s_fu_241_p1 <= reg_175;

    pixelInput_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, sum2_cast_fu_212_p1, sum4_cast_fu_231_p1, ap_CS_fsm_state8, pixelStart_1_fu_84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pixelInput_address0 <= sum4_cast_fu_231_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pixelInput_address0 <= sum2_cast_fu_212_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pixelInput_address0 <= pixelStart_1_fu_84(11 - 1 downto 0);
        else 
            pixelInput_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pixelInput_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pixelInput_ce0 <= ap_const_logic_1;
        else 
            pixelInput_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelOutput_address0_assign_proc : process(sum2_cast_reg_417, sum4_cast_reg_442, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, pixelStart_1_fu_84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pixelOutput_address0 <= sum4_cast_reg_442(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            pixelOutput_address0 <= sum2_cast_reg_417(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixelOutput_address0 <= pixelStart_1_fu_84(11 - 1 downto 0);
        else 
            pixelOutput_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pixelOutput_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            pixelOutput_ce0 <= ap_const_logic_1;
        else 
            pixelOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelOutput_d0_assign_proc : process(tmp_9_fu_373_p3, tmp_9_reg_503, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            pixelOutput_d0 <= tmp_9_reg_503;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixelOutput_d0 <= tmp_9_fu_373_p3;
        else 
            pixelOutput_d0 <= "XXXXXXXX";
        end if; 
    end process;


    pixelOutput_we0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            pixelOutput_we0 <= ap_const_logic_1;
        else 
            pixelOutput_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pixelStart_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(pixelStart_1_fu_84));
        sh_assign_1_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_492),32));

    sh_assign_1_fu_295_p3 <= 
        tmp_3_i_i_i_cast_fu_291_p1 when (isNeg_fu_277_p3(0) = '1') else 
        sh_assign_fu_271_p2;
    sh_assign_fu_271_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_267_p1));
    sum2_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_207_p2),32));
    sum2_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(tmp_7_reg_411));
    sum4_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_226_p2),32));
    sum4_fu_226_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(tmp_7_reg_411));
    tmp_10_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_339_p3),8));
    tmp_11_fu_351_p4 <= tmp_8_i_i_i_fu_333_p2(60 downto 53);
    tmp_12_fu_361_p3 <= 
        tmp_10_fu_347_p1 when (isNeg_reg_487(0) = '1') else 
        tmp_11_fu_351_p4;
        tmp_13_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_165),32));

        tmp_15_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_165),32));

    tmp_19_fu_339_p3 <= tmp_6_i_i_i_fu_327_p2(53 downto 53);
    tmp_1_i_i_i_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_i_i_fu_303_p4),137));
    tmp_1_i_i_i_fu_303_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_482) & ap_const_lv1_0);
        tmp_3_i_i_i_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_i_i_i_fu_285_p2),12));

    tmp_3_i_i_i_fu_285_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_253_p4));
    tmp_5_i_i_i_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_316_p1),54));
    tmp_5_i_i_i_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_316_p1),137));
    tmp_6_i_i_i_fu_327_p2 <= std_logic_vector(shift_right(unsigned(tmp_1_i_i_i_fu_303_p4),to_integer(unsigned('0' & tmp_5_i_i_i_cast_fu_323_p1(31-1 downto 0)))));
    tmp_7_fu_203_p1 <= pixelStart_1_fu_84(12 - 1 downto 0);
    tmp_8_fu_368_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_12_reg_497));
    tmp_8_i_i_i_fu_333_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_i_i_i_cast_fu_312_p1),to_integer(unsigned('0' & tmp_5_i_i_i_fu_319_p1(31-1 downto 0)))));
    tmp_9_fu_373_p3 <= 
        tmp_8_fu_368_p2 when (p_Result_s_reg_477(0) = '1') else 
        tmp_12_reg_497;
    tmp_fu_183_p4 <= pixelStart_1_fu_84(31 downto 2);
    tmp_i_i_i_i_cast1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_253_p4),12));
end behav;
