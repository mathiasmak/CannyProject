// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "greyScale.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic greyScale::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic greyScale::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<31> greyScale::ap_ST_fsm_state1 = "1";
const sc_lv<31> greyScale::ap_ST_fsm_state2 = "10";
const sc_lv<31> greyScale::ap_ST_fsm_state3 = "100";
const sc_lv<31> greyScale::ap_ST_fsm_state4 = "1000";
const sc_lv<31> greyScale::ap_ST_fsm_state5 = "10000";
const sc_lv<31> greyScale::ap_ST_fsm_state6 = "100000";
const sc_lv<31> greyScale::ap_ST_fsm_state7 = "1000000";
const sc_lv<31> greyScale::ap_ST_fsm_state8 = "10000000";
const sc_lv<31> greyScale::ap_ST_fsm_state9 = "100000000";
const sc_lv<31> greyScale::ap_ST_fsm_state10 = "1000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state11 = "10000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state12 = "100000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<31> greyScale::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<32> greyScale::ap_const_lv32_0 = "00000000000000000000000000000000";
const int greyScale::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> greyScale::ap_const_lv32_2 = "10";
const sc_lv<32> greyScale::ap_const_lv32_8 = "1000";
const sc_lv<32> greyScale::ap_const_lv32_F = "1111";
const sc_lv<32> greyScale::ap_const_lv32_14 = "10100";
const sc_lv<32> greyScale::ap_const_lv32_19 = "11001";
const sc_lv<32> greyScale::ap_const_lv32_1 = "1";
const sc_lv<1> greyScale::ap_const_lv1_1 = "1";
const sc_lv<32> greyScale::ap_const_lv32_3 = "11";
const sc_lv<32> greyScale::ap_const_lv32_4 = "100";
const sc_lv<32> greyScale::ap_const_lv32_7 = "111";
const sc_lv<32> greyScale::ap_const_lv32_9 = "1001";
const sc_lv<32> greyScale::ap_const_lv32_E = "1110";
const sc_lv<32> greyScale::ap_const_lv32_1A = "11010";
const sc_lv<32> greyScale::ap_const_lv32_1B = "11011";
const sc_lv<32> greyScale::ap_const_lv32_1C = "11100";
const sc_lv<32> greyScale::ap_const_lv32_1D = "11101";
const sc_lv<32> greyScale::ap_const_lv32_1E = "11110";
const sc_lv<32> greyScale::ap_const_lv32_10 = "10000";
const sc_lv<32> greyScale::ap_const_lv32_15 = "10101";
const sc_lv<64> greyScale::ap_const_lv64_3FBC28F5C28F5C29 = "11111110111100001010001111010111000010100011110101110000101001";
const sc_lv<64> greyScale::ap_const_lv64_3FD3333333333333 = "11111111010011001100110011001100110011001100110011001100110011";
const sc_lv<32> greyScale::ap_const_lv32_A = "1010";
const sc_lv<64> greyScale::ap_const_lv64_3FE2E147AE147AE1 = "11111111100010111000010100011110101110000101000111101011100001";
const sc_lv<32> greyScale::ap_const_lv32_1F = "11111";
const sc_lv<30> greyScale::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<12> greyScale::ap_const_lv12_1 = "1";
const sc_lv<12> greyScale::ap_const_lv12_2 = "10";
const sc_lv<32> greyScale::ap_const_lv32_3F = "111111";
const sc_lv<32> greyScale::ap_const_lv32_34 = "110100";
const sc_lv<32> greyScale::ap_const_lv32_3E = "111110";
const sc_lv<12> greyScale::ap_const_lv12_C01 = "110000000001";
const sc_lv<32> greyScale::ap_const_lv32_B = "1011";
const sc_lv<11> greyScale::ap_const_lv11_3FF = "1111111111";
const sc_lv<1> greyScale::ap_const_lv1_0 = "0";
const sc_lv<32> greyScale::ap_const_lv32_35 = "110101";
const sc_lv<32> greyScale::ap_const_lv32_3C = "111100";
const sc_lv<8> greyScale::ap_const_lv8_0 = "00000000";
const bool greyScale::ap_const_boolean_1 = true;

greyScale::greyScale(sc_module_name name) : sc_module(name), mVcdFile(0) {
    greyScale_AXILiteS_s_axi_U = new greyScale_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("greyScale_AXILiteS_s_axi_U");
    greyScale_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    greyScale_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    greyScale_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    greyScale_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    greyScale_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    greyScale_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    greyScale_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    greyScale_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    greyScale_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    greyScale_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    greyScale_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    greyScale_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    greyScale_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    greyScale_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    greyScale_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    greyScale_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    greyScale_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    greyScale_AXILiteS_s_axi_U->ACLK(ap_clk);
    greyScale_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    greyScale_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    greyScale_AXILiteS_s_axi_U->ap_start(ap_start);
    greyScale_AXILiteS_s_axi_U->interrupt(interrupt);
    greyScale_AXILiteS_s_axi_U->ap_ready(ap_ready);
    greyScale_AXILiteS_s_axi_U->ap_done(ap_done);
    greyScale_AXILiteS_s_axi_U->ap_idle(ap_idle);
    greyScale_AXILiteS_s_axi_U->pixelInput_address0(pixelInput_address0);
    greyScale_AXILiteS_s_axi_U->pixelInput_ce0(pixelInput_ce0);
    greyScale_AXILiteS_s_axi_U->pixelInput_q0(pixelInput_q0);
    greyScale_AXILiteS_s_axi_U->pixelOutput_address0(pixelOutput_address0);
    greyScale_AXILiteS_s_axi_U->pixelOutput_ce0(pixelOutput_ce0);
    greyScale_AXILiteS_s_axi_U->pixelOutput_we0(pixelOutput_we0);
    greyScale_AXILiteS_s_axi_U->pixelOutput_d0(pixelOutput_d0);
    greyScale_dadd_64bkb_U0 = new greyScale_dadd_64bkb<1,5,64,64,64>("greyScale_dadd_64bkb_U0");
    greyScale_dadd_64bkb_U0->clk(ap_clk);
    greyScale_dadd_64bkb_U0->reset(ap_rst_n_inv);
    greyScale_dadd_64bkb_U0->din0(grp_fu_144_p0);
    greyScale_dadd_64bkb_U0->din1(grp_fu_144_p1);
    greyScale_dadd_64bkb_U0->ce(ap_var_for_const0);
    greyScale_dadd_64bkb_U0->dout(grp_fu_144_p2);
    greyScale_dmul_64cud_U1 = new greyScale_dmul_64cud<1,6,64,64,64>("greyScale_dmul_64cud_U1");
    greyScale_dmul_64cud_U1->clk(ap_clk);
    greyScale_dmul_64cud_U1->reset(ap_rst_n_inv);
    greyScale_dmul_64cud_U1->din0(grp_fu_148_p0);
    greyScale_dmul_64cud_U1->din1(grp_fu_148_p1);
    greyScale_dmul_64cud_U1->ce(ap_var_for_const0);
    greyScale_dmul_64cud_U1->dout(grp_fu_148_p2);
    greyScale_dmul_64cud_U2 = new greyScale_dmul_64cud<1,6,64,64,64>("greyScale_dmul_64cud_U2");
    greyScale_dmul_64cud_U2->clk(ap_clk);
    greyScale_dmul_64cud_U2->reset(ap_rst_n_inv);
    greyScale_dmul_64cud_U2->din0(tmp_2_reg_457);
    greyScale_dmul_64cud_U2->din1(ap_var_for_const1);
    greyScale_dmul_64cud_U2->ce(ap_var_for_const0);
    greyScale_dmul_64cud_U2->dout(grp_fu_153_p2);
    greyScale_sitodp_dEe_U3 = new greyScale_sitodp_dEe<1,6,32,64>("greyScale_sitodp_dEe_U3");
    greyScale_sitodp_dEe_U3->clk(ap_clk);
    greyScale_sitodp_dEe_U3->reset(ap_rst_n_inv);
    greyScale_sitodp_dEe_U3->din0(grp_fu_159_p0);
    greyScale_sitodp_dEe_U3->ce(ap_var_for_const0);
    greyScale_sitodp_dEe_U3->dout(grp_fu_159_p1);
    greyScale_sitodp_dEe_U4 = new greyScale_sitodp_dEe<1,6,32,64>("greyScale_sitodp_dEe_U4");
    greyScale_sitodp_dEe_U4->clk(ap_clk);
    greyScale_sitodp_dEe_U4->reset(ap_rst_n_inv);
    greyScale_sitodp_dEe_U4->din0(grp_fu_162_p0);
    greyScale_sitodp_dEe_U4->ce(ap_var_for_const0);
    greyScale_sitodp_dEe_U4->dout(grp_fu_162_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_193_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_193_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_144_p0);
    sensitive << ( reg_169 );
    sensitive << ( reg_175 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_144_p1);
    sensitive << ( reg_169 );
    sensitive << ( tmp_3_reg_472 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_148_p0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_s_reg_452 );
    sensitive << ( tmp_5_reg_467 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_148_p1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_159_p0);
    sensitive << ( tmp_13_fu_217_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_15_fu_236_p1 );

    SC_METHOD(thread_grp_fu_162_p0);
    sensitive << ( pixelInput_load_1_reg_427 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_fu_193_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_183_p4 );

    SC_METHOD(thread_isNeg_fu_277_p3);
    sensitive << ( sh_assign_fu_271_p2 );

    SC_METHOD(thread_loc_V_1_fu_263_p1);
    sensitive << ( p_Val2_s_fu_241_p1 );

    SC_METHOD(thread_loc_V_fu_253_p4);
    sensitive << ( p_Val2_s_fu_241_p1 );

    SC_METHOD(thread_p_Val2_s_fu_241_p1);
    sensitive << ( reg_175 );

    SC_METHOD(thread_pixelInput_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sum2_cast_fu_212_p1 );
    sensitive << ( sum4_cast_fu_231_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( pixelStart_1_fu_84 );

    SC_METHOD(thread_pixelInput_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_pixelOutput_address0);
    sensitive << ( sum2_cast_reg_417 );
    sensitive << ( sum4_cast_reg_442 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( pixelStart_1_fu_84 );

    SC_METHOD(thread_pixelOutput_ce0);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_pixelOutput_d0);
    sensitive << ( tmp_9_fu_373_p3 );
    sensitive << ( tmp_9_reg_503 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_pixelOutput_we0);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_pixelStart_fu_380_p2);
    sensitive << ( pixelStart_1_fu_84 );

    SC_METHOD(thread_sh_assign_1_cast_fu_316_p1);
    sensitive << ( sh_assign_1_reg_492 );

    SC_METHOD(thread_sh_assign_1_fu_295_p3);
    sensitive << ( isNeg_fu_277_p3 );
    sensitive << ( sh_assign_fu_271_p2 );
    sensitive << ( tmp_3_i_i_i_cast_fu_291_p1 );

    SC_METHOD(thread_sh_assign_fu_271_p2);
    sensitive << ( tmp_i_i_i_i_cast1_fu_267_p1 );

    SC_METHOD(thread_sum2_cast_fu_212_p1);
    sensitive << ( sum2_fu_207_p2 );

    SC_METHOD(thread_sum2_fu_207_p2);
    sensitive << ( tmp_7_reg_411 );

    SC_METHOD(thread_sum4_cast_fu_231_p1);
    sensitive << ( sum4_fu_226_p2 );

    SC_METHOD(thread_sum4_fu_226_p2);
    sensitive << ( tmp_7_reg_411 );

    SC_METHOD(thread_tmp_10_fu_347_p1);
    sensitive << ( tmp_19_fu_339_p3 );

    SC_METHOD(thread_tmp_11_fu_351_p4);
    sensitive << ( tmp_8_i_i_i_fu_333_p2 );

    SC_METHOD(thread_tmp_12_fu_361_p3);
    sensitive << ( isNeg_reg_487 );
    sensitive << ( tmp_10_fu_347_p1 );
    sensitive << ( tmp_11_fu_351_p4 );

    SC_METHOD(thread_tmp_13_fu_217_p1);
    sensitive << ( reg_165 );

    SC_METHOD(thread_tmp_15_fu_236_p1);
    sensitive << ( reg_165 );

    SC_METHOD(thread_tmp_19_fu_339_p3);
    sensitive << ( tmp_6_i_i_i_fu_327_p2 );

    SC_METHOD(thread_tmp_1_i_i_i_cast_fu_312_p1);
    sensitive << ( tmp_1_i_i_i_fu_303_p4 );

    SC_METHOD(thread_tmp_1_i_i_i_fu_303_p4);
    sensitive << ( loc_V_1_reg_482 );

    SC_METHOD(thread_tmp_3_i_i_i_cast_fu_291_p1);
    sensitive << ( tmp_3_i_i_i_fu_285_p2 );

    SC_METHOD(thread_tmp_3_i_i_i_fu_285_p2);
    sensitive << ( loc_V_fu_253_p4 );

    SC_METHOD(thread_tmp_5_i_i_i_cast_fu_323_p1);
    sensitive << ( sh_assign_1_cast_fu_316_p1 );

    SC_METHOD(thread_tmp_5_i_i_i_fu_319_p1);
    sensitive << ( sh_assign_1_cast_fu_316_p1 );

    SC_METHOD(thread_tmp_6_i_i_i_fu_327_p2);
    sensitive << ( tmp_1_i_i_i_fu_303_p4 );
    sensitive << ( tmp_5_i_i_i_cast_fu_323_p1 );

    SC_METHOD(thread_tmp_7_fu_203_p1);
    sensitive << ( pixelStart_1_fu_84 );

    SC_METHOD(thread_tmp_8_fu_368_p2);
    sensitive << ( tmp_12_reg_497 );

    SC_METHOD(thread_tmp_8_i_i_i_fu_333_p2);
    sensitive << ( tmp_1_i_i_i_cast_fu_312_p1 );
    sensitive << ( tmp_5_i_i_i_fu_319_p1 );

    SC_METHOD(thread_tmp_9_fu_373_p3);
    sensitive << ( p_Result_s_reg_477 );
    sensitive << ( tmp_12_reg_497 );
    sensitive << ( tmp_8_fu_368_p2 );

    SC_METHOD(thread_tmp_fu_183_p4);
    sensitive << ( pixelStart_1_fu_84 );

    SC_METHOD(thread_tmp_i_i_i_i_cast1_fu_267_p1);
    sensitive << ( loc_V_fu_253_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_193_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "greyScale_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, pixelInput_address0, "pixelInput_address0");
    sc_trace(mVcdFile, pixelInput_ce0, "pixelInput_ce0");
    sc_trace(mVcdFile, pixelInput_q0, "pixelInput_q0");
    sc_trace(mVcdFile, pixelOutput_address0, "pixelOutput_address0");
    sc_trace(mVcdFile, pixelOutput_ce0, "pixelOutput_ce0");
    sc_trace(mVcdFile, pixelOutput_we0, "pixelOutput_we0");
    sc_trace(mVcdFile, pixelOutput_d0, "pixelOutput_d0");
    sc_trace(mVcdFile, reg_165, "reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, reg_169, "reg_169");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_144_p2, "grp_fu_144_p2");
    sc_trace(mVcdFile, reg_175, "reg_175");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_fu_193_p2, "icmp_fu_193_p2");
    sc_trace(mVcdFile, tmp_7_fu_203_p1, "tmp_7_fu_203_p1");
    sc_trace(mVcdFile, tmp_7_reg_411, "tmp_7_reg_411");
    sc_trace(mVcdFile, sum2_cast_fu_212_p1, "sum2_cast_fu_212_p1");
    sc_trace(mVcdFile, sum2_cast_reg_417, "sum2_cast_reg_417");
    sc_trace(mVcdFile, pixelInput_load_1_reg_427, "pixelInput_load_1_reg_427");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_13_fu_217_p1, "tmp_13_fu_217_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sum4_cast_fu_231_p1, "sum4_cast_fu_231_p1");
    sc_trace(mVcdFile, sum4_cast_reg_442, "sum4_cast_reg_442");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_159_p1, "grp_fu_159_p1");
    sc_trace(mVcdFile, tmp_s_reg_452, "tmp_s_reg_452");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_162_p1, "grp_fu_162_p1");
    sc_trace(mVcdFile, tmp_2_reg_457, "tmp_2_reg_457");
    sc_trace(mVcdFile, tmp_15_fu_236_p1, "tmp_15_fu_236_p1");
    sc_trace(mVcdFile, tmp_5_reg_467, "tmp_5_reg_467");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_153_p2, "grp_fu_153_p2");
    sc_trace(mVcdFile, tmp_3_reg_472, "tmp_3_reg_472");
    sc_trace(mVcdFile, p_Result_s_reg_477, "p_Result_s_reg_477");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, loc_V_1_fu_263_p1, "loc_V_1_fu_263_p1");
    sc_trace(mVcdFile, loc_V_1_reg_482, "loc_V_1_reg_482");
    sc_trace(mVcdFile, isNeg_fu_277_p3, "isNeg_fu_277_p3");
    sc_trace(mVcdFile, isNeg_reg_487, "isNeg_reg_487");
    sc_trace(mVcdFile, sh_assign_1_fu_295_p3, "sh_assign_1_fu_295_p3");
    sc_trace(mVcdFile, sh_assign_1_reg_492, "sh_assign_1_reg_492");
    sc_trace(mVcdFile, tmp_12_fu_361_p3, "tmp_12_fu_361_p3");
    sc_trace(mVcdFile, tmp_12_reg_497, "tmp_12_reg_497");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, tmp_9_fu_373_p3, "tmp_9_fu_373_p3");
    sc_trace(mVcdFile, tmp_9_reg_503, "tmp_9_reg_503");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, pixelStart_1_fu_84, "pixelStart_1_fu_84");
    sc_trace(mVcdFile, pixelStart_fu_380_p2, "pixelStart_fu_380_p2");
    sc_trace(mVcdFile, grp_fu_144_p0, "grp_fu_144_p0");
    sc_trace(mVcdFile, grp_fu_144_p1, "grp_fu_144_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_148_p0, "grp_fu_148_p0");
    sc_trace(mVcdFile, grp_fu_148_p1, "grp_fu_148_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_159_p0, "grp_fu_159_p0");
    sc_trace(mVcdFile, grp_fu_162_p0, "grp_fu_162_p0");
    sc_trace(mVcdFile, tmp_fu_183_p4, "tmp_fu_183_p4");
    sc_trace(mVcdFile, sum2_fu_207_p2, "sum2_fu_207_p2");
    sc_trace(mVcdFile, sum4_fu_226_p2, "sum4_fu_226_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_241_p1, "p_Val2_s_fu_241_p1");
    sc_trace(mVcdFile, loc_V_fu_253_p4, "loc_V_fu_253_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast1_fu_267_p1, "tmp_i_i_i_i_cast1_fu_267_p1");
    sc_trace(mVcdFile, sh_assign_fu_271_p2, "sh_assign_fu_271_p2");
    sc_trace(mVcdFile, tmp_3_i_i_i_fu_285_p2, "tmp_3_i_i_i_fu_285_p2");
    sc_trace(mVcdFile, tmp_3_i_i_i_cast_fu_291_p1, "tmp_3_i_i_i_cast_fu_291_p1");
    sc_trace(mVcdFile, tmp_1_i_i_i_fu_303_p4, "tmp_1_i_i_i_fu_303_p4");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_316_p1, "sh_assign_1_cast_fu_316_p1");
    sc_trace(mVcdFile, tmp_5_i_i_i_cast_fu_323_p1, "tmp_5_i_i_i_cast_fu_323_p1");
    sc_trace(mVcdFile, tmp_1_i_i_i_cast_fu_312_p1, "tmp_1_i_i_i_cast_fu_312_p1");
    sc_trace(mVcdFile, tmp_5_i_i_i_fu_319_p1, "tmp_5_i_i_i_fu_319_p1");
    sc_trace(mVcdFile, tmp_6_i_i_i_fu_327_p2, "tmp_6_i_i_i_fu_327_p2");
    sc_trace(mVcdFile, tmp_19_fu_339_p3, "tmp_19_fu_339_p3");
    sc_trace(mVcdFile, tmp_8_i_i_i_fu_333_p2, "tmp_8_i_i_i_fu_333_p2");
    sc_trace(mVcdFile, tmp_10_fu_347_p1, "tmp_10_fu_347_p1");
    sc_trace(mVcdFile, tmp_11_fu_351_p4, "tmp_11_fu_351_p4");
    sc_trace(mVcdFile, tmp_8_fu_368_p2, "tmp_8_fu_368_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("greyScale.hdltvin.dat");
    mHdltvoutHandle.open("greyScale.hdltvout.dat");
}

greyScale::~greyScale() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete greyScale_AXILiteS_s_axi_U;
    delete greyScale_dadd_64bkb_U0;
    delete greyScale_dmul_64cud_U1;
    delete greyScale_dmul_64cud_U2;
    delete greyScale_sitodp_dEe_U3;
    delete greyScale_sitodp_dEe_U4;
}

void greyScale::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void greyScale::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_3FE2E147AE147AE1;
}

void greyScale::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        isNeg_reg_487 = sh_assign_fu_271_p2.read().range(11, 11);
        loc_V_1_reg_482 = loc_V_1_fu_263_p1.read();
        p_Result_s_reg_477 = p_Val2_s_fu_241_p1.read().range(63, 63);
        sh_assign_1_reg_492 = sh_assign_1_fu_295_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixelInput_load_1_reg_427 = pixelInput_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pixelStart_1_fu_84 = pixelStart_fu_380_p2.read();
        tmp_9_reg_503 = tmp_9_fu_373_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_165 = pixelInput_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        reg_169 = grp_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_175 = grp_fu_144_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sum2_cast_reg_417 = sum2_cast_fu_212_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum4_cast_reg_442 = sum4_cast_fu_231_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        tmp_12_reg_497 = tmp_12_fu_361_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_2_reg_457 = grp_fu_162_p1.read();
        tmp_s_reg_452 = grp_fu_159_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_3_reg_472 = grp_fu_153_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_5_reg_467 = grp_fu_159_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_fu_193_p2.read(), ap_const_lv1_1))) {
        tmp_7_reg_411 = tmp_7_fu_203_p1.read();
    }
}

void greyScale::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void greyScale::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void greyScale::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void greyScale::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void greyScale::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void greyScale::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void greyScale::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void greyScale::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void greyScale::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void greyScale::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void greyScale::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void greyScale::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void greyScale::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void greyScale::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void greyScale::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void greyScale::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void greyScale::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void greyScale::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void greyScale::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void greyScale::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void greyScale::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_fu_193_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void greyScale::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void greyScale::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_fu_193_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void greyScale::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void greyScale::thread_grp_fu_144_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_144_p0 = reg_175.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_144_p0 = reg_169.read();
    } else {
        grp_fu_144_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void greyScale::thread_grp_fu_144_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_144_p1 = reg_169.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_144_p1 = tmp_3_reg_472.read();
    } else {
        grp_fu_144_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void greyScale::thread_grp_fu_148_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_148_p0 = tmp_5_reg_467.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_148_p0 = tmp_s_reg_452.read();
    } else {
        grp_fu_148_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void greyScale::thread_grp_fu_148_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_148_p1 = ap_const_lv64_3FD3333333333333;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_148_p1 = ap_const_lv64_3FBC28F5C28F5C29;
    } else {
        grp_fu_148_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void greyScale::thread_grp_fu_159_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_159_p0 = tmp_15_fu_236_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_159_p0 = tmp_13_fu_217_p1.read();
    } else {
        grp_fu_159_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void greyScale::thread_grp_fu_162_p0() {
    grp_fu_162_p0 = esl_sext<32,8>(pixelInput_load_1_reg_427.read());
}

void greyScale::thread_icmp_fu_193_p2() {
    icmp_fu_193_p2 = (!tmp_fu_183_p4.read().is_01() || !ap_const_lv30_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_183_p4.read() == ap_const_lv30_0);
}

void greyScale::thread_isNeg_fu_277_p3() {
    isNeg_fu_277_p3 = sh_assign_fu_271_p2.read().range(11, 11);
}

void greyScale::thread_loc_V_1_fu_263_p1() {
    loc_V_1_fu_263_p1 = p_Val2_s_fu_241_p1.read().range(52-1, 0);
}

void greyScale::thread_loc_V_fu_253_p4() {
    loc_V_fu_253_p4 = p_Val2_s_fu_241_p1.read().range(62, 52);
}

void greyScale::thread_p_Val2_s_fu_241_p1() {
    p_Val2_s_fu_241_p1 = reg_175.read();
}

void greyScale::thread_pixelInput_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pixelInput_address0 =  (sc_lv<11>) (sum4_cast_fu_231_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pixelInput_address0 =  (sc_lv<11>) (sum2_cast_fu_212_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pixelInput_address0 =  (sc_lv<11>) (pixelStart_1_fu_84.read());
    } else {
        pixelInput_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void greyScale::thread_pixelInput_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        pixelInput_ce0 = ap_const_logic_1;
    } else {
        pixelInput_ce0 = ap_const_logic_0;
    }
}

void greyScale::thread_pixelOutput_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        pixelOutput_address0 =  (sc_lv<11>) (sum4_cast_reg_442.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        pixelOutput_address0 =  (sc_lv<11>) (sum2_cast_reg_417.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pixelOutput_address0 =  (sc_lv<11>) (pixelStart_1_fu_84.read());
    } else {
        pixelOutput_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void greyScale::thread_pixelOutput_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        pixelOutput_ce0 = ap_const_logic_1;
    } else {
        pixelOutput_ce0 = ap_const_logic_0;
    }
}

void greyScale::thread_pixelOutput_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        pixelOutput_d0 = tmp_9_reg_503.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pixelOutput_d0 = tmp_9_fu_373_p3.read();
    } else {
        pixelOutput_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void greyScale::thread_pixelOutput_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        pixelOutput_we0 = ap_const_logic_1;
    } else {
        pixelOutput_we0 = ap_const_logic_0;
    }
}

void greyScale::thread_pixelStart_fu_380_p2() {
    pixelStart_fu_380_p2 = (!ap_const_lv32_3.is_01() || !pixelStart_1_fu_84.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_3) + sc_biguint<32>(pixelStart_1_fu_84.read()));
}

void greyScale::thread_sh_assign_1_cast_fu_316_p1() {
    sh_assign_1_cast_fu_316_p1 = esl_sext<32,12>(sh_assign_1_reg_492.read());
}

void greyScale::thread_sh_assign_1_fu_295_p3() {
    sh_assign_1_fu_295_p3 = (!isNeg_fu_277_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_277_p3.read()[0].to_bool())? tmp_3_i_i_i_cast_fu_291_p1.read(): sh_assign_fu_271_p2.read());
}

void greyScale::thread_sh_assign_fu_271_p2() {
    sh_assign_fu_271_p2 = (!ap_const_lv12_C01.is_01() || !tmp_i_i_i_i_cast1_fu_267_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(tmp_i_i_i_i_cast1_fu_267_p1.read()));
}

void greyScale::thread_sum2_cast_fu_212_p1() {
    sum2_cast_fu_212_p1 = esl_zext<32,12>(sum2_fu_207_p2.read());
}

void greyScale::thread_sum2_fu_207_p2() {
    sum2_fu_207_p2 = (!ap_const_lv12_1.is_01() || !tmp_7_reg_411.read().is_01())? sc_lv<12>(): (sc_biguint<12>(ap_const_lv12_1) + sc_biguint<12>(tmp_7_reg_411.read()));
}

void greyScale::thread_sum4_cast_fu_231_p1() {
    sum4_cast_fu_231_p1 = esl_zext<32,12>(sum4_fu_226_p2.read());
}

void greyScale::thread_sum4_fu_226_p2() {
    sum4_fu_226_p2 = (!ap_const_lv12_2.is_01() || !tmp_7_reg_411.read().is_01())? sc_lv<12>(): (sc_biguint<12>(ap_const_lv12_2) + sc_biguint<12>(tmp_7_reg_411.read()));
}

void greyScale::thread_tmp_10_fu_347_p1() {
    tmp_10_fu_347_p1 = esl_zext<8,1>(tmp_19_fu_339_p3.read());
}

void greyScale::thread_tmp_11_fu_351_p4() {
    tmp_11_fu_351_p4 = tmp_8_i_i_i_fu_333_p2.read().range(60, 53);
}

void greyScale::thread_tmp_12_fu_361_p3() {
    tmp_12_fu_361_p3 = (!isNeg_reg_487.read()[0].is_01())? sc_lv<8>(): ((isNeg_reg_487.read()[0].to_bool())? tmp_10_fu_347_p1.read(): tmp_11_fu_351_p4.read());
}

void greyScale::thread_tmp_13_fu_217_p1() {
    tmp_13_fu_217_p1 = esl_sext<32,8>(reg_165.read());
}

void greyScale::thread_tmp_15_fu_236_p1() {
    tmp_15_fu_236_p1 = esl_sext<32,8>(reg_165.read());
}

void greyScale::thread_tmp_19_fu_339_p3() {
    tmp_19_fu_339_p3 = tmp_6_i_i_i_fu_327_p2.read().range(53, 53);
}

void greyScale::thread_tmp_1_i_i_i_cast_fu_312_p1() {
    tmp_1_i_i_i_cast_fu_312_p1 = esl_zext<137,54>(tmp_1_i_i_i_fu_303_p4.read());
}

void greyScale::thread_tmp_1_i_i_i_fu_303_p4() {
    tmp_1_i_i_i_fu_303_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, loc_V_1_reg_482.read()), ap_const_lv1_0);
}

void greyScale::thread_tmp_3_i_i_i_cast_fu_291_p1() {
    tmp_3_i_i_i_cast_fu_291_p1 = esl_sext<12,11>(tmp_3_i_i_i_fu_285_p2.read());
}

void greyScale::thread_tmp_3_i_i_i_fu_285_p2() {
    tmp_3_i_i_i_fu_285_p2 = (!ap_const_lv11_3FF.is_01() || !loc_V_fu_253_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(loc_V_fu_253_p4.read()));
}

void greyScale::thread_tmp_5_i_i_i_cast_fu_323_p1() {
    tmp_5_i_i_i_cast_fu_323_p1 = esl_zext<54,32>(sh_assign_1_cast_fu_316_p1.read());
}

void greyScale::thread_tmp_5_i_i_i_fu_319_p1() {
    tmp_5_i_i_i_fu_319_p1 = esl_zext<137,32>(sh_assign_1_cast_fu_316_p1.read());
}

void greyScale::thread_tmp_6_i_i_i_fu_327_p2() {
    tmp_6_i_i_i_fu_327_p2 = (!tmp_5_i_i_i_cast_fu_323_p1.read().is_01())? sc_lv<54>(): tmp_1_i_i_i_fu_303_p4.read() >> (unsigned short)tmp_5_i_i_i_cast_fu_323_p1.read().to_uint();
}

void greyScale::thread_tmp_7_fu_203_p1() {
    tmp_7_fu_203_p1 = pixelStart_1_fu_84.read().range(12-1, 0);
}

void greyScale::thread_tmp_8_fu_368_p2() {
    tmp_8_fu_368_p2 = (!ap_const_lv8_0.is_01() || !tmp_12_reg_497.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_0) - sc_biguint<8>(tmp_12_reg_497.read()));
}

void greyScale::thread_tmp_8_i_i_i_fu_333_p2() {
    tmp_8_i_i_i_fu_333_p2 = (!tmp_5_i_i_i_fu_319_p1.read().is_01())? sc_lv<137>(): tmp_1_i_i_i_cast_fu_312_p1.read() << (unsigned short)tmp_5_i_i_i_fu_319_p1.read().to_uint();
}

void greyScale::thread_tmp_9_fu_373_p3() {
    tmp_9_fu_373_p3 = (!p_Result_s_reg_477.read()[0].is_01())? sc_lv<8>(): ((p_Result_s_reg_477.read()[0].to_bool())? tmp_8_fu_368_p2.read(): tmp_12_reg_497.read());
}

void greyScale::thread_tmp_fu_183_p4() {
    tmp_fu_183_p4 = pixelStart_1_fu_84.read().range(31, 2);
}

void greyScale::thread_tmp_i_i_i_i_cast1_fu_267_p1() {
    tmp_i_i_i_i_cast1_fu_267_p1 = esl_zext<12,11>(loc_V_fu_253_p4.read());
}

void greyScale::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_fu_193_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<31>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void greyScale::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

